import React, { Component, Fragment } from "react";
import * as domService from "../../../services/dom.service";
import cx from "classnames";
import "./FeatureTile.css";
import * as taggingActions from '../../../pages/common/tagging/actions';
import * as taggingConstants from '../../../pages/common/tagging/constants';
import * as consts from "../../../pages/FeaturesGridwall/constants";
import { ActionIndicator, FeatureStatus, FeatureAction,labelForApplePerk  } from "../../../pages/FeaturesGridwall/constants";
import * as FeaturesService from "../../../pages/FeaturesGridwall/feature-service";
import * as StringUtils from "../../../pages/FeaturesGridwall/utils/string-utils";
import { onKeyPressEvent } from "../../../utils/validation";
import { Checkbox } from "@vds/checkboxes";
import {FeatureGridwallView} from '../../../pages/FeaturesGridwall/container/AsyncFeaturesGridwallContainer'
import { getaemContent } from "../../../pages/BAYouPlans/selectors";
import greenCheck from "./greenCheck.png"
import AsyncComponent from "../../common/AsyncComponent";
import PerkRemovalModal from "./PerkRemovalModal";
const FeatureDiscountTooltip = 
AsyncComponent(() => {  return import(/* webpackChunkName: "FeatureDiscountTooltip"*/'./FeatureDiscountTooltip'); });

class FeatureTile extends Component
{
  constructor(props)
  {
    super(props);
    let actionToPerform = "";
    const { feature } = this.props;
      if (feature.isExisting || feature.actionIndicator === ActionIndicator.EXISTING) {
        actionToPerform = (feature.actionIndicator === ActionIndicator.EXISTING) ? FeatureAction.REMOVE : FeatureAction.ADD_TO_CART;
      } else {
        actionToPerform = (feature.actionIndicator === ActionIndicator.ADD) ? FeatureAction.ADDED_TO_CART : FeatureAction.ADD_TO_CART;
    }
    this.state = {
      isFeatureSelected: (actionToPerform === FeatureAction.ADDED_TO_CART ? true : false),
      actionToPerformState: actionToPerform,
      isOpenModal:false
    };
  }
  
  componentDidUpdate(prevProps)
  {
    let actionToPerform = "";
  
    let feature = this.props?.feature || {};
      if (feature?.isExisting || feature?.actionIndicator === ActionIndicator.EXISTING) {
        actionToPerform = (feature?.actionIndicator === ActionIndicator.EXISTING) ? FeatureAction.REMOVE : FeatureAction.ADD_TO_CART;
      } else {
        actionToPerform = (feature?.actionIndicator === ActionIndicator.ADD) ? FeatureAction.ADDED_TO_CART : FeatureAction.ADD_TO_CART;
    }
    let isFeatureUpdated = actionToPerform === FeatureAction.ADDED_TO_CART ? true : false;
    if (isFeatureUpdated !== this.state.isFeatureSelected)
    {
      this.setState({
        isFeatureSelected: isFeatureUpdated,
        actionToPerformState: actionToPerform
      });
    }
    
   }
    render() {
      const { legacyFeatureList,feature, isRecommendation, isExtenderForWHW,appleMutualIds:{mutualIds=[],getLabel=""},featuresCache,selMTN, bannerYTTVContentData } = this.props;
      let showBanner = feature?.skuName?.includes("YouTubeTV Basic Subscription")
      let products = [];
      const selLine = featuresCache?.lines && featuresCache?.lines?.find(line => line?.mtn === selMTN);
      if (selLine) {
        products = (selLine?.products && selLine?.products?.length > 0) ? selLine?.products : [];
      }
      //This is a temperory patch fix to suppress for Unlimited Individual Cloud Perk if there is shared cloud feature on current line.
      if(feature.sorId === '3199'){ 
          const cloudFeaturesProducts = Array.isArray(products) && products?.filter(item => item?.productId === "sfo80093" || item?.productId === "bayouperks");
          let gfFeatureExists =  [];
          cloudFeaturesProducts?.map((cloudFeature) => 
          gfFeatureExists = legacyFeatureList?.filter(legacyFeature => cloudFeature?.skus?.find(sku => legacyFeature === sku.sorId && sku.existingIndicator === ActionIndicator.EXISTING )
        ));
        if(gfFeatureExists?.length > 0 ){
            return null;
          }
      } 
       const baYoufilterData =   Array.isArray(products) && products.find(item => item?.productId === "bayouperks")?.skus;
      const sordIdsWithBYOAPPLE = baYoufilterData?.find(item => item.categoryCodes?.includes("BYOAPPLE") && item?.isExisting === true)    
      let labelForApple = labelForApplePerk?.find(item => item?.sorId == sordIdsWithBYOAPPLE?.sorId)?.label;
      // for Data boost kind of Addons.
      let existingStackedCnt = 0;
      const stackableData = feature.stackableData;
      if (stackableData && stackableData.existingCount > 0) {
        existingStackedCnt = stackableData.existingCount;
      }
      let WHWPLUSSelected = false; let WHWBasicSelected = false
      if(feature?.categoryCodes?.includes("WHWPLUS")){
        WHWPLUSSelected = this.state.isFeatureSelected 
      }
      else if(feature?.categoryCodes?.includes("WHWBASIC")){
        WHWBasicSelected = this.state.isFeatureSelected 
      }
      // 'Current / Removed / New'
      let featureStatus = "";
      if (feature.isExisting || feature.actionIndicator === ActionIndicator.EXISTING || (feature.stackableData && existingStackedCnt > 0)) {
        featureStatus = (feature.actionIndicator === ActionIndicator.EXISTING || existingStackedCnt > 0)? FeatureStatus.CURRENT : FeatureStatus.REMOVED;
      } else {
        featureStatus = (feature.actionIndicator === ActionIndicator.ADD) ? FeatureStatus.NEW : '';
      }

      // 'Remove / Add to cart / Added to cart'
      let actionToPerform = "";
      if (feature.isExisting || feature.actionIndicator === ActionIndicator.EXISTING) {
        actionToPerform = (feature.actionIndicator === ActionIndicator.EXISTING) ? FeatureAction.REMOVE : FeatureAction.ADD_TO_CART;
      } else {
        actionToPerform = (feature.actionIndicator === ActionIndicator.ADD) ? FeatureAction.ADDED_TO_CART : FeatureAction.ADD_TO_CART;
      }

      // Feature Image.
      const featureImg = (feature.imageUrl ? feature.imageUrl : consts.DEFAULT_FEATURE_IMG_URL) + "?$pngalpha$";
      //MutualPerks for Apple products in bayou
      const sorIdActionIndication = baYoufilterData?.find(item => item?.categoryCodes?.includes("BYOAPPLE") && item?.actionIndicator === "A")
      let labelForAppleBuild = labelForApplePerk?.find(item => item?.sorId == sorIdActionIndication?.sorId)?.label;
      const isCheckboxDisabled = this.props.assistedFlags?.midnightWHW === "TRUE" ?  feature?.categoryCodes && feature?.categoryCodes?.length > 0 && feature?.categoryCodes?.includes("WHWPLUS") && this.props.depletionType === "L" : false ;
      return ( 
        !isExtenderForWHW && (feature.sorId === "2625" || feature.sorId === "2626" || feature.sorId === "2627"  || feature.sorId === "2628") ? null : (
        <Fragment>
          <div className="Feature-Tile" featureid={feature.sorId}>

            <div className='grid-top'>

              {/* Feature status: New / Removed / Current */}
              <div className={"u-paddingBottomSmall font-14 u-minHeightLarge u-maxHeightLarge" +(featureStatus === "Removed" ?" text-orange bold" : "")}>
                {featureStatus}
              </div>
              
              {/* Feature image. */}
              {showBanner && <div className="banner-text">{bannerYTTVContentData?.message ? bannerYTTVContentData?.message : ""}<span onClick={()=>this.props.handleshowModal(true)} style={{textDecoration: "underline", cursor: "pointer" }}>Details</span></div>}
              <img data-testid="FeatureTileImg" data-track={`viewdetails_${feature.skuName}`} className="feature-icon crsr" src={featureImg} alt={feature && feature.skuName ? feature.skuName : "Feature image"} onClick={(event) => this.viewFeatureDetail(event)} tabIndex="0" role="button" onKeyPress={(e)=>onKeyPressEvent(e)&&this.viewFeatureDetail(e)}/>

              {/* Feature name. */}
              <span data-track={`viewdetails_${feature.skuName}`} className="font-18 bold full-width border-top-black-light u-marginTopSmall u-paddingTopMedium u-paddingBottomMedium crsr"
                onClick={(event) => this.viewFeatureDetail(event)} role="heading" aria-level={"2"}
                dangerouslySetInnerHTML={{ __html: `${existingStackedCnt > 0? existingStackedCnt + 'x ': ''}${feature.skuName}` || 'No Feature Name' }}>
              </span>
              {(feature?.ref?.contentId == "VZSECURE-LINE" || feature?.ref?.contentId == "VZSECURE-ACCT" || feature?.ref?.contentId == "IDSECURE-LINE" || feature?.ref?.contentId == "IDSECURE-ACCT") && (feature?.actionIndicator?.trim() == "" || feature?.actionIndicator?.trim() == "A") ?
                 <div className="feature-id-label bold full-width crsr firstmonth-on-us" >First month on us</div>:null
              }
            </div>

            <div className='grid-bottom'>
            {sorIdActionIndication?.mutexFeatures?.includes(feature?.sorId) ? <div>{labelForAppleBuild}</div> : <div>
            { !this.props.mutualIdLabelText  && sordIdsWithBYOAPPLE?.mutexFeatures?.includes(feature?.sorId) ? <div>{labelForApple}</div> : <div>
            { this.state.actionToPerformState === "Add to cart" && mutualIds?.includes(feature?.sorId)  ?  
            <div>{getLabel?.label}</div> : <div>

              <div className="feature-id-label u-paddingTop20pct" onDoubleClick={() => FeaturesService.logToConsole(feature)}>
                {(feature.sorId || feature.catId )+ "-" + (feature.type && feature.type.toLowerCase())}
              </div>

              {/* Feature price. */}
              {feature && feature.price && <div className="u-flexGrow1 featurePrice">
                {(feature?.price?.regularPrice !== feature.price.discountedPrice) ?
                <>
                  <a style={{ color: "black" }}>
                    {this.getFeatureDiscountToolTip(feature)}
                  </a>{feature?.categoryCodes?.includes(this.props?.catCode) && feature?.categoryCodes?.includes("WHWPLUS") ? <img  style={{"height": "25px", "width": "25px", "marginLeft": "10px"}}  src={greenCheck} alt="logo"/> : ""}
                  <div>
                  {this.props?.midnightWHWFlag && feature?.categoryCodes?.includes("WHWBASIC") && <div style={{margin: "5px", display: "inline-block"}}><strong>Included </strong></div>} 
                  {feature?.categoryCodes?.includes(this.props?.catCode) && feature?.categoryCodes?.includes("WHWBASIC") ? <img  style={{"height": "25px", "width": "25px", "marginLeft": "20px"}}  src={greenCheck} alt="logo"/> : ""}
                  </div>
                  </>
                  :<div className="font-18">
                    <>
                    {domService.formatCurrency(feature?.price?.regularPrice)}/{feature.frequency || 'month'}  {feature?.categoryCodes?.includes(this.props.catCode) && feature?.categoryCodes?.includes("WHWPLUS") ? <img  style={{"height": "25px", "width": "25px"}}  src={greenCheck} alt="logo"/> : ""}
                    <div>
                    {this.props?.midnightWHWFlag && feature?.categoryCodes?.includes("WHWBASIC") && <div style={{margin: "5px", display: "inline-block"}}><strong>Included </strong></div>} 
                    {feature?.categoryCodes?.includes(this.props?.catCode) && feature?.categoryCodes?.includes("WHWBASIC") ? <img  style={{"height": "25px", "width": "25px", "marginLeft": "20px"}}  src={greenCheck} alt="logo"/> : ""}
                    </div>
                    </>
                  </div>}
              </div>}
              {this.state.isOpenModal && <PerkRemovalModal isOpen = {this.state.isOpenModal} onClose={this.closeModal}/>}
              {/* Feature action: 'Add to cart' / 'Remove' / 'Added to cart' */}
              <div className="u-marginTopLarge">
                {!feature.isNotRemovable && feature?.selectable === true &&
                  (this.state.actionToPerformState === FeatureAction.REMOVE ?
                    (<div className="removelink underline" tabIndex="0" role="button" aria-label={`removeFeature - ${feature.skuName}`} onClick={(event) => this.updateFeature(event, this.state.actionToPerformState,feature?.sorId)} onKeyPress={(event) => onKeyPressEvent(event) && this.updateFeature(event, this.state.actionToPerformState,feature?.sorId)} >
                      <span data-track="Remove">Remove</span>
                    </div>) :
                    (<div className="u-displayInlineBlock u-paddingLeft0 u-marginLeft0 " /*tabIndex="0" onKeyPress={(e)=>onKeyPressEvent(e) &&  this.updateFeature(e, actionToPerform) } aria-label={actionToPerform} role="checkbox" aria-checked={(actionToPerform === FeatureAction.ADDED_TO_CART) ? true : false}*/>
                    <Checkbox
                      // className={"u-marginLeftMedium add-cart-checkbox " + (actionToPerform === FeatureAction.ADDED_TO_CART ? " text-green bold" : "")}
                        className={isCheckboxDisabled ? 'disabled-checkbox-label' : ''}
                        name={feature.sorId}
                        type = "checkbox"
                        aria-describedby={feature.sorId}
                        ariaLabel={`${this.state.actionToPerformState} - ${feature.skuName}`}
                        selected={this.state.isFeatureSelected }
                        disabled={isCheckboxDisabled}
                        onChange={(event) => this.updateFeature(event, this.state.actionToPerformState)}>
                        <span aria-hidden>{this.state.actionToPerformState}</span>
                      </Checkbox>
                      </div>))
                }
                </div>
</div>} </div>}</div>}
              <div className="u-marginTopExtraSmall" data-testId="ViewEligibility">
                {feature.vzProtectEligibleDevice && feature.vzProtectEligibleDevice.length > 0 &&
                  (<span className="underline crsr font-12" 
                      onClick={(event) => this.showItemEligibility(event)} tabIndex="0" role="button" onKeyPress={(e)=>onKeyPressEvent(e) && this.showItemEligibility(e)}>
                    View Eligibility
                  </span>)
                }
              </div>

            </div>
          </div>
        </Fragment>)
      );
    }

    setPreviousActionAgain = () => {
      const previousAction = this.state.previousAction || this.state.actionToPerformState;
      this.setState({ actionToPerformState: previousAction });
    }  
    
    closeModal = () => {
      this.props.updateFeatures(this.state.updateObj);
      this.setState({ isOpenModal: false });
   };
    /**
     *  Add/Remove Feature(s).
     */
    updateFeature = (event, actionToPerform, getSorId) => {
      this.setState({ previousAction: this.state.actionToPerformState });
      const {featuresCache,selMTN} = this.props
      const sorId = event?.target?.name;
      if ((this.state.actionToPerformState ==="Added to cart"))
      {
        this.setState({
          actionToPerformState: "Add to cart",
        isFeatureSelected: false});
      }
      else if(this.state.actionToPerformState ==="Add to cart")
      {
       this.setState({
         actionToPerformState: "Added to cart",
         isFeatureSelected: true
       }); 
       sessionStorage.setItem("FEAAdded",true);
      }
      else if ((this.state.actionToPerformState === "Remove"))
      {
        this.setState({
          actionToPerformState: "Add to cart",
        isFeatureSelected: false});
        this.props.getMutualLabelText({mutualLabelText:true})
      }
      const featureToUpdate = {
        ...this.props.feature,
      };

      const updateObj = {
        event,
        featureToUpdate: featureToUpdate,
        isRecommendation: this.props.isRecommendation,
        fromDetail: false,
      };
    const labelText = [{"sorId":"2677","label":"This perk is incompatible with Apple music family. Adding this perk will remove Apple music family from this line."},
                       {"sorId":"2678","label":"This perk is incompatible with Apple One Individual. Adding this perk will remove Apple One Individual from this line."},
                       {"sorId":"2679","label":"This perk is incompatible with Apple One Family. Adding this perk will remove Apple One Family from this line."}]
    const getLabel = labelText?.find(item => item?.sorId == sorId)
    let products = [];
    const appleSorIds=[];
    const selLine = featuresCache?.lines && featuresCache?.lines?.find(line => line?.mtn === selMTN);
    if (selLine) {
      products = (selLine?.products && selLine?.products?.length > 0) ? selLine?.products : [];
    }
    const baYoufilterData =   Array.isArray(products) && products.find(item => item?.productId === "bayouperks")?.skus;
    const sordIdsWithBYOAPPLE = baYoufilterData?.filter(item => item.categoryCodes?.includes("BYOAPPLE"))
     sordIdsWithBYOAPPLE?.filter(item =>{
      appleSorIds.push(item?.sorId)
    })
      if(appleSorIds.includes(sorId)){
      const mutualIds = appleSorIds?.filter((item)=> item !== sorId)
      if(this.state.actionToPerformState === "Add to cart" && mutualIds.length > 0){ 
        this.props.getMutualIds({mutualIds,getLabel})
      }}
      if(appleSorIds?.includes(sorId) && this.state.actionToPerformState === "Added to cart" || this.state.actionToPerformState === "Remove"){
        this.props.getMutualIds({mutualIds:[],getLabel:""})
      }
      const hasAccountLevel = featuresCache?.shared?.products.map((product) => {
        return (
          product.skus.filter((item) => item.actionIndicator == 'Z' && item.insuranceSpo == true)
        )
      })
      const AccountLevelSpo = hasAccountLevel?.flat();
      if (featureToUpdate?.type == "SFO" && featureToUpdate?.productName == "Device Protection" && AccountLevelSpo?.length > 0 && actionToPerform === FeatureAction.ADD_TO_CART) {
          this.props.toggleFeatureConfirmationPopup({ ...updateObj, hasAccountLevelSpo: true });
      }
     else if (featureToUpdate.insuranceSpo) {      
        if (actionToPerform === FeatureAction.ADD_TO_CART) {
          this.props.toggleFeatureConfirmationPopup(updateObj);
        } else {
          if(sessionStorage.getItem("customerType")==="N"){
            this.props.updateFeatures(updateObj);
          } else {
            this.props.toggleLegalMessageModal(updateObj, this.setPreviousActionAgain);
          }
        }
      } else {
        let minValue;
        this.props?.feature?.spoAttributesList?.length > 0&& 
        this.props?.feature?.spoAttributesList.map((item)=> {
          if(item.attributeName=="EXT_MAX_SHIP"){
            minValue =item?.attributeValue;
          }
        })
        if(updateObj?.featureToUpdate?.sorId =="2626" || updateObj?.featureToUpdate?.sorId =="2625" || updateObj?.featureToUpdate?.sorId =="2627" || updateObj?.featureToUpdate?.sorId =="2628"){
        const channel = sessionStorage.getItem("channel"); 
        if((this.props.ispuItem && !channel.includes("OMNI-INDIRECT")) || (this.props.depletionType === "F"  || this.props.depletionType === "O")) {
          
            updateObj.accessories = minValue;
            updateObj.extenderSorId= this.props?.feature?.extenderSorId;
      }
          const whwPlusExtenderObj = {
            extenderSorId: this.props.feature?.extenderSorId,
            extenderProductId: this.props.feature?.extenderProductId,
            sorId: this.props.feature?.sorId,
            extenderQuant:  this.props.depletionType =="L" && !this.props.ispuItem ? minValue : updateObj.accessories
          };
          this.props.whwPlusExtenderQuant(whwPlusExtenderObj);
        }
        const getSmartWatchSorId = baYoufilterData?.find((item) => Array.isArray(item?.categoryCodes) && item?.categoryCodes?.includes("BYOGETHELP") && item?.isExisting === true)
        if(this.state.actionToPerformState === "Remove" && getSmartWatchSorId?.sorId === getSorId) {
          this.setState({isOpenModal:true,updateObj})
        }
        else{
         this.props.updateFeatures(updateObj)
        }
      }
      sessionStorage.setItem("addonsUpdated", true);
    };

    //Device Eligibility
    showItemEligibility = (event) => {
     const sorId = this.props.feature && this.props.feature.sorId && this.props.feature.sorId || "";
     this.props.showDeviceEligibility(event, sorId);
    }

    /**
     *  viewFeatureDetail().
     */
    viewFeatureDetail = (event) => {
      const feature = this.props.feature;
      if (feature.additionalCoverage && (StringUtils.isNullOrEmpty(feature.actionIndicator) || /^(D)$/.test(StringUtils.trimToNull(feature.actionIndicator)))) {
        event.preventDefault();
        return;
      }
      window.store.dispatch(taggingActions.invokeTagging({
        showModal: true,
        pageDetail: taggingConstants.PAGE_DETAIL.MODAL.FEATURES,
        pagename: taggingConstants.PAGENAME.FEATURES_PDP_PAGE,
        data: this.props.feature
      }));

      this.props.viewFeatureDetail(true, this.props.feature);
    };

    getFeatureDiscountToolTip = feature => {
        return(
            <FeatureDiscountTooltip
                price={feature.price}
                duePrice={feature.price.discountedPrice}
                totalPrice={feature?.price?.regularPrice}
            />
        );
    };

}
export default FeatureTile;
